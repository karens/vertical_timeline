<?php

/**
 * @file
 * Contains vertical_timeline.module..
 */

use Drupal\views\ViewExecutable;
use Drupal\Component\Datetime\DateTimePlus;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vertical_timeline_theme_suggestions_views_view_alter(&$suggestions, &$vars, $hook) {
  // Look only for views that use the Vertical Timeline style plugin.
  if (!empty($vars['view']) && $vars['view']->style_plugin instanceof \Drupal\vertical_timeline\Plugin\views\style\VerticalTimelineStyle) {
    // Tell the theme system to use a different template instead of the default views_view template.
    // This template adds markup outside of the area the style plugin can control.
    $suggestions[] = 'vertical_timeline__vertical_timeline';
  }
}

/**
 * Implements hook_registry_alter().
 *
 * Update the theme registry with our theme suggestion. This would not be required
 * if the template was provided by the theme, but is needed so a module can provide
 * a template.
 */
function vertical_timeline_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'vertical_timeline');
  // Duplicate the registry entry for the views_view template.
  $theme_registry['vertical_timeline__vertical_timeline'] = $theme_registry['views_view'];
  // Update the entry to indicate that the template is in the module directory, not the theme directory.
  $theme_registry['vertical_timeline__vertical_timeline']['template'] = 'vertical-timeline--vertical-timeline';
  $theme_registry['vertical_timeline__vertical_timeline']['path'] = $path . '/templates';
}

/**
 * Prepares variables for view templates.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A ViewExecutable object.
 *   - rows: The raw row data.
 *   - options: An array of options. Each option contains:
 *     - separator: A string to be placed between inline fields to keep them
 *       visually distinct.
 */
function template_preprocess_vertical_timeline_style(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $rows = $variables['rows'];
  $style = $view->style_plugin;
  $options = $style->options;
  $variables['options'] = $options;

  $prev_group = '';
  $options['group_heading'] = 'format';
  $options['group_heading_format'] = 'M Y';

  foreach ($rows as $id => $row) {
    $field = $options['date_field'];
    $date = '';
    if (isset($view->field[$field])) {
      $node = $row['#row']->_entity;

      $raw = $node->get($options['date_field'])->value;

      switch ($options['group_heading']) {
        case 'century':
          $obj = is_numeric($raw) ? DateTimePlus::createFromTimestamp($raw) : new DateTimePlus($raw);
          $date = substr($obj->format('Y'), 0, 2) . '00';
          break;
        case 'format':
          $obj = is_numeric($raw) ? DateTimePlus::createFromTimestamp($raw) : new DateTimePlus($raw);
          $date = $obj->format($options['group_heading_format']);
          break;
        case 'date':
          $date = $style->getField($id, $field);
          $date = strip_tags(htmlspecialchars_decode($date));
          //$date = \Drupal::service('renderer')->render($date);
          break;
        default:
          $date = NULL;
          break;
      }

      $group = $date;
      if ($group != $prev_group) {
        $variables['rows'][$id]['group'] = $date;
      }
      $prev_group = $group;

    }

  }
}
